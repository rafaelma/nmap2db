#!/usr/bin/env python
#
# Copyright (c) 2014 Rafael Martinez Guerrero (PostgreSQL-es)
# rafael@postgresql.org.es / http://www.postgresql.org.es/
#
# This file is part of nmp2db
# https://github.com/rafaelma/nmap2db
#
# nmap2db is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# nmap2db is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Pgbackman.  If not, see <http://www.gnu.org/licenses/>.

import subprocess
import tempfile
import datetime
import sys
import os
import time
import signal
import argparse

from nmap2db.logs import *
from nmap2db.database import * 
from nmap2db.config import *


# ############################################
# Function handler
# ############################################
    
def stop_signal_handler(signum, frame):
    logs.logger.info('**** pgbackman_dump stopped. ****')
    sys.exit(0)


###########################################
# Function
# ############################################
  
def check_database_connection(db):
    '''Check if we can connect to the database server and the pgbackman database'''

    try:
        db.pg_connect()
        return True
    except Exception as e:    
        return False
        

# ############################################
# Function 
# ############################################
    
def main():
    '''Main function'''
    
    conf = configuration()
    dsn = conf.dsn

    logs.logger.debug('DSN: host=%s hostaddr=%s port=%s database=%s user=%s ',conf.dbhost,conf.dbhostaddr,conf.dbport,conf.dbname,conf.dbuser)
    logs.logger.debug('pg_connect retry interval: %s',conf.pg_connect_retry_interval)

    db = nmap2db_db(dsn,logs,'nmap2db_dump')
    
    #
    # Main loop waiting for notifications
    #
    while True:
        time.sleep(2)

        try:
            scan_job_id = db.get_next_scan_job()

            if scan_job_id != None:
                
                scan_job_args = db.get_scan_job_args(scan_job_id)
                scan_job_network = db.get_scan_job_network(scan_job_id)

                for host in db.expand_network(scan_job_network):

                    nmap_command = 'nmap ' + scan_job_args + ' ' + host[0]
                    
                    proc = subprocess.Popen(nmap_command.split(),stdout=subprocess.PIPE,stderr=subprocess.PIPE)
                    proc.wait
                    
                    output, error = proc.communicate()

                    if proc.returncode == 0:
                        db.save_scan_report(scan_job_id,output)
                        logs.logger.debug('Scan jobID: %s for host: %s has saved the XML report in the database',scan_job_id,host[0])
                    else:
                        logs.logger.error('Scan JobID: %s exit with an error: %s',scan_job_id,error)

        except psycopg2.OperationalError as e:

            logs.logger.critical('Operational error')
            
            check_db = check_database_connection(db)
            
            while not check_db:
                logs.logger.critical('We have lost the connection to the database. Waiting %s seconds before trying again',conf.pg_connect_retry_interval)
                
                time.sleep(conf.pg_connect_retry_interval)
                check_db = check_database_connection(db)

        except Exception as e:
            logs.logger.error('Problems running scan jobID: %s \nCommand: %s \n%s',scan_job_id,nmap_command,e)

    db.pg_close()

# ############################################
# 
# ############################################

if __name__ == '__main__':

    logs = logs("nmap2db_dump")
    logs.logger.info('**** nmap2db_dump started. ****')

    signal.signal(signal.SIGINT,stop_signal_handler)
    signal.signal(signal.SIGTERM,stop_signal_handler)

    main()
